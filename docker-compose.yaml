services:
  postgres:
    image: postgres:15-alpine
    container_name: encar_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./database:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - encar_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: encar_redis
    restart: unless-stopped
    networks:
      - encar_network

  proxy:
    image: v2fly/v2fly-core:latest
    container_name: encar_proxy
    restart: unless-stopped
    volumes:
      - ./proxy/config.json:/etc/v2ray/config.json:ro
    networks:
      - encar_network
    ports:
      - "1080:1080"
      - "8080:8080"

  celery_worker:
    build: ./parser
    container_name: encar_celery_worker
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      - HTTP_PROXY=http://proxy:8080
      - HTTPS_PROXY=http://proxy:8080
      - http_proxy=http://proxy:8080
      - https_proxy=http://proxy:8080
    volumes:
      - ./parser:/app
    depends_on:
      - postgres
      - redis
    networks:
      - encar_network
    command: >
      sh -c "
        echo 'ðŸš€ Starting Celery worker...' &&
        sleep 10 &&
        echo 'ðŸ“‹ Initializing database...' &&
        python -c 'from database import create_tables; create_tables(); print(\"âœ… Database initialized\")' &&
        echo 'ðŸŽ¯ Starting Celery worker with beat scheduler...' &&
        celery -A celery_app worker --beat --loglevel=info --concurrency=1
      "

  backend:
    build: ./backend
    container_name: encar_backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
    expose:
      - "8000"
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - encar_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build: ./frontend
    container_name: encar_frontend
    restart: unless-stopped
    environment:
      - VITE_API_URL=/api
    expose:
      - "3000"
    depends_on:
      - backend
    networks:
      - encar_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    container_name: encar_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - frontend
      - backend
    networks:
      - encar_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

networks:
  encar_network:
    driver: bridge
